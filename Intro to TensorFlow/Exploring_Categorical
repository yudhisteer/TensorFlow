{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Exploring_Categorical","provenance":[{"file_id":"https://github.com/tinyMLx/colabs/blob/master/2-2-7-ExploringCategorical.ipynb","timestamp":1604756862840}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"cells":[{"cell_type":"markdown","metadata":{"id":"jL2nKxjS4S_r"},"source":["# Start with a simple neural network for MNIST\n","Note that there are 2 layers, one with 20 neurons, and one with 10.\n","\n","The 10-neuron layer is our final layer because we have 10 classes we want to classify.\n","\n","Train this, and you should see it get about 98% accuracy"]},{"cell_type":"code","metadata":{"id":"zrQ-DeQtybXZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756287698,"user_tz":-240,"elapsed":69271,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"a2ab7694-f528-47a3-ee19-23bd3945ad0f"},"source":["import tensorflow as tf\n","data = tf.keras.datasets.mnist\n","\n","(training_images, training_labels), (val_images, val_labels) = data.load_data()\n","\n","training_images  = training_images / 255.0\n","val_images = val_images / 255.0\n","model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)),\n","                                    tf.keras.layers.Dense(20, activation=tf.nn.relu),\n","                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])\n","\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","model.fit(training_images, training_labels, epochs=20, validation_data=(val_images, val_labels))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.3932 - accuracy: 0.8917 - val_loss: 0.2520 - val_accuracy: 0.9276\n","Epoch 2/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.2282 - accuracy: 0.9353 - val_loss: 0.2075 - val_accuracy: 0.9404\n","Epoch 3/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1927 - accuracy: 0.9443 - val_loss: 0.1878 - val_accuracy: 0.9462\n","Epoch 4/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1722 - accuracy: 0.9499 - val_loss: 0.1714 - val_accuracy: 0.9493\n","Epoch 5/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1564 - accuracy: 0.9545 - val_loss: 0.1574 - val_accuracy: 0.9554\n","Epoch 6/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1448 - accuracy: 0.9579 - val_loss: 0.1559 - val_accuracy: 0.9540\n","Epoch 7/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1360 - accuracy: 0.9607 - val_loss: 0.1469 - val_accuracy: 0.9575\n","Epoch 8/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1288 - accuracy: 0.9627 - val_loss: 0.1585 - val_accuracy: 0.9539\n","Epoch 9/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1225 - accuracy: 0.9637 - val_loss: 0.1419 - val_accuracy: 0.9583\n","Epoch 10/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1169 - accuracy: 0.9655 - val_loss: 0.1395 - val_accuracy: 0.9603\n","Epoch 11/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1120 - accuracy: 0.9667 - val_loss: 0.1388 - val_accuracy: 0.9601\n","Epoch 12/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1085 - accuracy: 0.9675 - val_loss: 0.1374 - val_accuracy: 0.9608\n","Epoch 13/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1052 - accuracy: 0.9679 - val_loss: 0.1419 - val_accuracy: 0.9596\n","Epoch 14/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1006 - accuracy: 0.9696 - val_loss: 0.1381 - val_accuracy: 0.9618\n","Epoch 15/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0982 - accuracy: 0.9708 - val_loss: 0.1334 - val_accuracy: 0.9634\n","Epoch 16/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0955 - accuracy: 0.9719 - val_loss: 0.1317 - val_accuracy: 0.9623\n","Epoch 17/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0926 - accuracy: 0.9721 - val_loss: 0.1345 - val_accuracy: 0.9630\n","Epoch 18/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0907 - accuracy: 0.9718 - val_loss: 0.1379 - val_accuracy: 0.9604\n","Epoch 19/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0887 - accuracy: 0.9725 - val_loss: 0.1345 - val_accuracy: 0.9633\n","Epoch 20/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0860 - accuracy: 0.9735 - val_loss: 0.1442 - val_accuracy: 0.9615\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f95e85e5438>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"JN92xbwK4i_S"},"source":["## Examine the test data\n","\n","Using model.evaluate, you can get metrics for a test set. In this case we only have a training set and a validation set, so we can try it out with the validation set. The accuracy will be slightly lower, at maybe 96%.  This is because the model hasn't previously seen this data and may not be fully generalized for all data. Still it's a pretty good score.\n","\n","You can also predict images, and compare against their actual label. The [0] image in the set is a number 7, and here you can see that neuron 7 has a 9.9e-1 (99%+) probability, so it got it right!\n"]},{"cell_type":"code","metadata":{"id":"Rzit5Te-4lT6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756288626,"user_tz":-240,"elapsed":70183,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"abaffa5f-3435-4333-b9cc-7b822830bc42"},"source":["\n","model.evaluate(val_images, val_labels)\n","\n","classifications = model.predict(val_images)\n","print(classifications[0])\n","print(val_labels[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["313/313 [==============================] - 0s 2ms/step - loss: 0.1442 - accuracy: 0.9615\n","[9.2757091e-06 3.9195611e-13 2.9036034e-06 3.8820843e-04 5.8536306e-14\n"," 4.5994043e-06 5.7384487e-15 9.9956566e-01 2.3356679e-05 5.9008207e-06]\n","7\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6LkJGAiI5Cr3"},"source":["## Modify to inspect learned values\n","\n","This code is identical, except that the layers are named prior to adding to the sequential. This allows us to inspect their learned parameters later."]},{"cell_type":"code","metadata":{"id":"eyyJ3RMYpFXR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756348946,"user_tz":-240,"elapsed":130495,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"862a72dd-10f9-42b4-8767-41dc795ed528"},"source":["import tensorflow as tf\n","data = tf.keras.datasets.mnist\n","\n","(training_images, training_labels), (val_images, val_labels) = data.load_data()\n","\n","training_images  = training_images / 255.0\n","val_images = val_images / 255.0\n","layer_1 = tf.keras.layers.Dense(20, activation=tf.nn.relu)\n","layer_2 = tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n","model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)),\n","                                    layer_1,\n","                                    layer_2])\n","\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","model.fit(training_images, training_labels, epochs=20)\n","\n","model.evaluate(val_images, val_labels)\n","\n","classifications = model.predict(val_images)\n","print(classifications[0])\n","print(val_labels[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.4050 - accuracy: 0.8888\n","Epoch 2/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.2282 - accuracy: 0.9352\n","Epoch 3/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1965 - accuracy: 0.9430\n","Epoch 4/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1763 - accuracy: 0.9485\n","Epoch 5/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1619 - accuracy: 0.9525\n","Epoch 6/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1509 - accuracy: 0.9550\n","Epoch 7/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1425 - accuracy: 0.9581\n","Epoch 8/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1341 - accuracy: 0.9602\n","Epoch 9/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1281 - accuracy: 0.9615\n","Epoch 10/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1228 - accuracy: 0.9625\n","Epoch 11/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1186 - accuracy: 0.9643\n","Epoch 12/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1134 - accuracy: 0.9658\n","Epoch 13/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1102 - accuracy: 0.9669\n","Epoch 14/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1059 - accuracy: 0.9678\n","Epoch 15/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.1024 - accuracy: 0.9692\n","Epoch 16/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0995 - accuracy: 0.9700\n","Epoch 17/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0972 - accuracy: 0.9714\n","Epoch 18/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0947 - accuracy: 0.9708\n","Epoch 19/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0922 - accuracy: 0.9724\n","Epoch 20/20\n","1875/1875 [==============================] - 3s 2ms/step - loss: 0.0908 - accuracy: 0.9722\n","313/313 [==============================] - 1s 2ms/step - loss: 0.1492 - accuracy: 0.9610\n","[4.6729376e-08 1.3549418e-08 2.0486121e-05 1.8751431e-03 3.9847747e-11\n"," 1.4437214e-07 2.7022490e-17 9.9782997e-01 4.3999560e-05 2.3016092e-04]\n","7\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7pNYFF935PlE"},"source":["# Inspect weights\n","\n","If you print layer_1.get_weights(), you'll see a lot of data. Let's unpack it. First, there are 2 arrays in the result, so let's look at the first one. In particular let's look at its size."]},{"cell_type":"code","metadata":{"id":"QACivjNKxFWW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756406965,"user_tz":-240,"elapsed":1562,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"63a30db2-bacb-4fa0-bc57-2cf1680df356"},"source":["print(layer_1.get_weights()[0].size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["15680\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lqpHrDyp5acs"},"source":["The above code should print 15680. Why?\n","\n","Recall that there are 20 neurons in the first layer.\n","\n","Recall also that the images are 28x28, which is 784.\n","\n","If you multiply 784 x 20 you get 15680.\n","\n","So...this layer has 20 neurons, and each neuron learns a W parameter for each pixel. So instead of y=Mx+c, we have \n","y=M1X1+M2X2+M3X3+....+M784X784+C in every neuron! \n","\n","Every pixel has a weight in every neuron. Those weights are multiplied by the pixel value, summed up, and given a bias.\n"]},{"cell_type":"code","metadata":{"id":"TdXrHDEw6ACm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756348951,"user_tz":-240,"elapsed":130481,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"61c68ed0-1098-4df9-c361-23f82d4c1196"},"source":["print(layer_1.get_weights()[1].size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["20\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EIOZ7rJy6Eg1"},"source":["The above code will give you 20 -- the get_weights()[1] contains the biases for each of the 20 neurons in this layer."]},{"cell_type":"markdown","metadata":{"id":"yyFKpzxN6T-N"},"source":["## Inspecting layer 2\n","\n","Now let's look at layer 2. Printing the get_weights will give us 2 lists, the first a list of weights for the 10 neurons, and the second a list of biases for the 10 neurons\n","\n","Let's look first at the weights:"]},{"cell_type":"code","metadata":{"id":"o9P_PVwXyKXJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756348952,"user_tz":-240,"elapsed":130473,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"033074c6-deb5-4369-d907-03cfb42b85a7"},"source":["print(layer_2.get_weights()[0].size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["200\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"daah2gq56fdb"},"source":["This should return 200. Again, consider why?\n","\n","There are 10 neurons in this layer, but there are 20 neurons in the previous layer. So, each neuron in this layer will learn a weight for the incoming value from the previous layer. So, for example, the if the first neuron in this layer is N21, and the neurons output from the previous layers are N11-N120, then this neuron will have 20 weights (W1-W20) and it will calculate its output to be:\n","\n","W1N11+W2N12+W3N13+...+W20N120+Bias\n","\n","So each of these weights will be learned as will the bias, for every neuron.\n"]},{"cell_type":"code","metadata":{"id":"Reyw9wC65o8z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604756348953,"user_tz":-240,"elapsed":130466,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"87b58e2e-f9ac-4f2e-9014-88042d44c315"},"source":["print(layer_2.get_weights()[1].size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["10\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DS89WZag7GlB"},"source":["...and as expected there are 10 elements in this array, representing the 10 biases for the 10 neurons.\n","\n","Hopefully this helps you see how the element of a simple neuron containing y=mx+c can be expanded greatly into a deep neural network, and that DNN can learn the parameters that match the 784 pixels of an image to their output!"]}]}